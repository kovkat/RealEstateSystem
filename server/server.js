import express from 'express';
import propertyRoutes from './routes/properties.js';
import { sequelize } from './db/index.js';
import cron from 'node-cron';
import { getAllOlxProperties } from './parsers/olxParser.js';
import { getAllDomriaProperties } from './parsers/domriaParser.js';
import { getAllLunProperties } from './parsers/lunparser.js';
import { Property, PropertyImage } from './models/Property.js';
import mlService from './mlService.js';
import { Review, ReviewImage } from './models/Review.js';
import cache from './cache.js';
import logger from './logger.js';

const app = express();
app.use(express.json());

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ä–æ—É—Ç—ñ–≤ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—é
app.use('/api/properties', propertyRoutes);

async function updateProperties() {
    try {
        console.log('üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –¥–∂–µ—Ä–µ–ª...');

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ø–∞—Ä—Å–µ—Ä—ñ–≤
        const [olxProps, domriaProps, lunProps] = await Promise.all([
            getAllOlxProperties(),
            getAllDomriaProperties(),
            getAllLunProperties()
        ]);

        // –û–±'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
        const allProps = [...olxProps, ...domriaProps, ...lunProps];

        // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∑–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
        const uniquePropsMap = new Map();
        allProps.forEach(prop => {
            if (!uniquePropsMap.has(prop.link)) {
                uniquePropsMap.set(prop.link, prop);
            }
        });

        const uniqueProps = Array.from(uniquePropsMap.values());

        // –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        await PropertyImage.destroy({ where: {} });
        await Property.destroy({ where: {} });

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å —É –±–∞–∑—É
        for (const prop of uniqueProps) {
            const createdProp = await Property.create({
                title: prop.title || '',
                description: prop.description || '',
                address: prop.location || '',
                city: prop.city || '',
                rooms: prop.rooms || null,
                area: prop.area || null,
                type: prop.type || 'apartment',
                source: prop.source || '',
                link: prop.link || '',
                price: prop.price || null,
            });
            if (prop.images && prop.images.length > 0) {
                for (const imgUrl of prop.images) {
                    await PropertyImage.create({
                        propertyId: createdProp.id,
                        url: imgUrl
                    });
                }
            }
        }

        console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ ${uniqueProps.length} –æ–≥–æ–ª–æ—à–µ–Ω—å`);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
        if (logger) logger.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: ' + error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –æ–¥—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
updateProperties();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω
cron.schedule('0 */6 * * *', () => {
    console.log('üïï –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
    updateProperties();
});

// –í–∏–∫–ª–∏–∫ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ —à–∞—Ö—Ä–∞–π—Å—Ç–≤–∞ —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥—É
app.use(async(req, res, next) => {
    try {
        const properties = await Property.findAll();
        await mlService.evaluateProperties(properties);
        next();
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è:', error);
        if (logger) logger.error('–ü–æ–º–∏–ª–∫–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è: ' + error.message);
        next(error);
    }
});


// –ó–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è
app.use(cache.middleware);

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ —Ç–∞ –ø–æ–º–∏–ª–æ–∫
app.use(logger.requestLogger);
app.use(logger.errorLogger);

(async() => {
    try {
        await sequelize.authenticate();
        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ë–î —ñ–∑ –º–æ–¥–µ–ª—è–º–∏
        await sequelize.sync({ alter: true });
        console.log('üì¶ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', error);
        if (logger) logger.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message);
    }
})();

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});